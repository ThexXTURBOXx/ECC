#ifndef ECC_CYCLIC_H
#define ECC_CYCLIC_H

#include "CoCoA/library.H"

using namespace std;

namespace CoCoA {

  /**
   * Calculate the dual polynomial of g, generating the dual code of the cyclic code generated by g.
   * @param g The generator polynomial of the cyclic code
   * @param n The length of the cyclic code
   * @return The dual polynomial of g
   */
  RingElem dualPoly(ConstRefRingElem g, long n);

  /**
   * Systematically encode a message using a cyclic code.
   * @param g The generator polynomial of the cyclic code
   * @param p The message polynomial
   * @param x The variable of the polynomial ring
   * @param n The length of the cyclic code
   * @param k The dimension of the cyclic code
   * @return The systematically encoded message polynomial
   */
  RingElem sysEncodeCyclic(ConstRefRingElem g, ConstRefRingElem p, ConstRefRingElem x, long n, long k);

  /**
   * Decode a message in a cyclic code using the Gröbner basis method by Cooper.
   * @param g The generator polynomial of the cyclic code
   * @param p The message polynomial
   * @param x The variable of the polynomial ring
   * @param a A primitive element of the field
   * @param q The order of the field
   * @param n The length of the cyclic code
   * @param qn The size of the field
   * @return The decoded message polynomial
   * @see Cooper III, A. B. (1993). Toward a new method of decoding algebraic codes using Gröbner bases
   */
  RingElem decodeCyclicGroebner(ConstRefRingElem g, ConstRefRingElem p, ConstRefRingElem x, ConstRefRingElem a,
                                long q, long n, long qn);

}

#endif // ECC_CYCLIC_H
